# DEBUGは切り替えなくても実行可能
python manage.py runserver
celery -A config worker -l INFO -P eventlet --pool=solo

# DB で1度実行すればデータは消えないので再度実行する必要は無い
# su だけは Heroku の Run console から作成する必要がある
python manage.py createsuperuser

# パッケージに変更があればその都度実行してファイルを更新する
pip freeze > requirements.txt

# 本番環境でエラーを確認する時は DEBUG=True にするとブラウザでもエラーが表示されるが、中身が見られるのでエラーを確認したら元に戻す

Heroku は捨てメアドだと拒否される

# セロリを起動するときはローカルではこれじゃないと django.db.utils.DatabaseError が発生する
celery -A config worker -l INFO -P eventlet --pool=solo

# Herokuではこれ
worker: celery -A config worker -l INFO
# celery5.0からはworkerの前に-Aないとエラーになる
--pool=solo
# 付けたら勝手にtask実行してたので消した

# .delay の戻り値のタスクIDからでも、その場なら .state とかで進行状況を取得できるけど、html から post されたタスクIDでは取得できないので AsyncResult を使用してタスクの最新の進行状況を取得する

# os.environ だと存在しない場合は KeyError を raise するけど、os.environ.get だと存在しない場合は None を返してエラーは発生しないので
# if not DEBUG:
#     SECRET_KEY=os.environ['SECRET_KEY']
# ↑これは多分不要

su
Me0Tu4g9IG288Tt1zl1R
nIeaur8sEIvbdCLhBI5L
user
qMCm1rZDDb
cWixDU3Kvv

ローカルでのsu
aaa
aaa

web: gunicorn config.wsgi
worker: celery -A config worker -l INFO
worker: python manage.py custom_command

python manage.py custom_command